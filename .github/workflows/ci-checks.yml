name: CI (Tests, Type Check, Lint, Format, Audit)

on:
  pull_request:
  push:
    branches: [main]

jobs:
  checks:
    name: Run tests, type check, lint, format, audit
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache node modules for faster installs
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Use Node.js 20
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run Vitest with coverage (fail step if tests fail)
      - name: Run tests with coverage
        run: npm run test -- --run --coverage

      # Ensure coverage directory exists (avoid artifact upload warning)
      - name: Ensure coverage directory exists
        run: mkdir -p coverage
        continue-on-error: true

      # Upload coverage report as artifact (non-blocking)
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
        continue-on-error: true

      # TypeScript type check (fail step if type errors)
      - name: TypeScript type check
        run: npx tsc --noEmit

      # Build check (Vite) (fail step if build fails)
      - name: Build app
        run: npm run build

      # Audit dependencies for vulnerabilities (non-blocking)
      - name: Audit dependencies
        run: npm audit --audit-level=moderate || true
        continue-on-error: true

      # Install ESLint SARIF formatter
      - name: Install ESLint SARIF formatter
        run: npm install --no-save @microsoft/eslint-formatter-sarif

      # Run ESLint and output SARIF (non-blocking - reports issues but doesn't fail CI)
      - name: Run ESLint
        run: npm run lint -- -f @microsoft/eslint-formatter-sarif -o eslint-results.sarif
        continue-on-error: true

      # Ensure eslint-results.sarif exists (avoid upload error)
      - name: Ensure eslint-results.sarif exists
        run: '[ -f eslint-results.sarif ] || echo "{\"version\":\"2.1.0\",\"runs\":[]}" > eslint-results.sarif'
        continue-on-error: true

      # Check if SARIF has results (robust: only upload if at least one result exists)
      - name: Check if SARIF has results
        id: sarif_check
        run: |
          # If there is at least one result object, upload; otherwise, skip
          if grep -q '"results":\[{' eslint-results.sarif; then
            echo "empty_sarif=false" >> $GITHUB_OUTPUT
          else
            echo "empty_sarif=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      # Upload ESLint SARIF results to GitHub (v3) only if SARIF is not empty (non-blocking)
      - name: Upload SARIF results to GitHub
        if: steps.sarif_check.outputs.empty_sarif == 'false'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
        continue-on-error: true

      # Run Prettier and save output (fail step if formatting issues)
      - name: Run Prettier and save output
        id: prettier
        run: |
          npx prettier --check . > prettier-output.txt || true

      # Ensure prettier-output.txt exists (avoid grep error)
      - name: Ensure prettier-output.txt exists
        run: '[ -f prettier-output.txt ] || touch prettier-output.txt'

      # Annotate Prettier errors in GitHub UI if any are found (non-blocking)
      - name: Annotate Prettier errors
        if: always()
        run: |
          if grep -q '\[warn\]' prettier-output.txt; then
            echo "::error title=Prettier formatting issues detected::Run 'npm run format' to fix code style issues. See details below:"
            cat prettier-output.txt
          fi
        continue-on-error: true

      # All steps that should not block merging use continue-on-error: true. Lint, test, and prettier steps will show as failed in the UI for visibility, but will not block PRs if not required in branch protection.